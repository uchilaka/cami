# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/metadata/profiles', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Metadata::Profile. As you add validations to Metadata::Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  let(:user) { Fabricate :user }
  let(:account) { Fabricate :individual, users: [user] }

  describe 'GET /index' do
    let(:account) { Fabricate :individual_with_profiles }

    before { sign_in user }

    it 'renders a successful response' do
      get account_profiles_url(account), params: { format: :json }
      expect(response).to have_http_status(:ok)
    end
  end

  describe 'GET /show' do
    let(:profile) { Fabricate :user_profile }
    let(:account) { Fabricate :individual, profiles: [profile] }

    it 'renders a successful response' do
      get account_profile_url(account, profile.id.to_s), params: { format: :json }
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_account_profile_url(account)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      # profile = Metadata::Profile.create! valid_attributes
      get edit_account_profile_url(account, account.profile)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Metadata::Profile' do
        expect do
          post _metadata_profiles_url, params: { metadata_profile: valid_attributes }
        end.to change(Metadata::Profile, :count).by(1)
      end

      it 'redirects to the created metadata_profile' do
        post _metadata_profiles_url, params: { metadata_profile: valid_attributes }
        expect(response).to redirect_to(_metadata_profile_url(Metadata::Profile.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Metadata::Profile' do
        expect do
          post _metadata_profiles_url, params: { metadata_profile: invalid_attributes }
        end.to change(Metadata::Profile, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post _metadata_profiles_url, params: { metadata_profile: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested metadata_profile' do
        profile = Metadata::Profile.create! valid_attributes
        patch _metadata_profile_url(profile), params: { metadata_profile: new_attributes }
        profile.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the metadata_profile' do
        profile = Metadata::Profile.create! valid_attributes
        patch _metadata_profile_url(profile), params: { metadata_profile: new_attributes }
        profile.reload
        expect(response).to redirect_to(metadata_profile_url(profile))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        profile = Metadata::Profile.create! valid_attributes
        patch _metadata_profile_url(profile), params: { metadata_profile: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested metadata_profile' do
      profile = Metadata::Profile.create! valid_attributes
      expect do
        delete _metadata_profile_url(profile)
      end.to change(Metadata::Profile, :count).by(-1)
    end

    it 'redirects to the metadata_profiles list' do
      profile = Metadata::Profile.create! valid_attributes
      delete _metadata_profile_url(profile)
      expect(response).to redirect_to(_metadata_profiles_url)
    end
  end
end
