# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/accounts', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Account.create! valid_attributes
      get accounts_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    context 'with a signed in user' do
      let(:user) { Fabricate :user }

      before do
        sign_in user
      end

      context 'accessing an authorized account' do
        let(:account) { Fabricate :account }

        context 'with the default format' do
          it 'renders a successful response' do
            account = Account.create! valid_attributes
            get account_url(account)
            expect(response).to be_successful
          end
        end

        context 'with format = json' do
          let(:data) { JSON.parse(response.body) }
          let(:user) { Fabricate :user }
          let(:account) { Fabricate :account }
          let(:expected_actions) do
            {
              'edit' => {
                'httpMethod' => 'GET',
                'label' => 'Edit',
                'url' => account_url(account)
              },
              'delete' => {
                'httpMethod' => 'DELETE',
                'label' => 'Delete',
                'url' => account_url(account, format: :json)
              },
              'show' => {
                'httpMethod' => 'GET',
                'label' => 'Back to accounts',
                'url' => accounts_url
              }
            }
          end

          before do
            sign_in user
            get account_url(account, format: :json)
          end

          it 'renders a successful response' do
            expect(response).to be_successful
          end

          it 'returns the display name' do
            expect(data['displayName']).to eq(account.display_name)
          end

          it 'returns the account ID' do
            expect(data['id']).to eq(account.id.to_s)
          end

          it 'returns a hash of actions' do
            expect(data.dig('actions', 'edit')).to \
              match(hash_including(expected_actions['edit']))

            expect(data.dig('actions', 'delete')).to \
              match(hash_including(expected_actions['delete']))

            expect(data.dig('actions', 'show')).to \
              match(hash_including(expected_actions['show']))
          end

          it 'returns the actions as a list' do
            expect(data.dig('actionsList', 0)).to \
              match(hash_including(expected_actions['edit']))

            expect(data.dig('actionsList', 1)).to \
              match(hash_including(expected_actions['delete']))

            expect(data.dig('actionsList', 2)).to \
              match(hash_including(expected_actions['show']))
          end

          it 'returns the account slug' do
            expect(data['slug']).to eq(account.slug)
          end

          it 'returns the account status' do
            expect(data['status']).to eq(account.status)
          end

          context 'when the account is a business' do
            let(:account) { Fabricate :business }

            it 'returns the tax ID' do
              expect(data['taxId']).to eq(account.tax_id)
            end

            context 'with invoices' do
              let(:email) { Faker::Internet.email }
              let(:account) do
                Fabricate :account_with_invoices,
                          type: 'Business',
                          invoices: [Fabricate(:invoice), Fabricate(:invoice)]
              end

              it 'returns the invoices' do
                expect(data['invoices']).not_to be_nil
              end
            end
          end

          context 'when the account is an individual' do
            let(:account) { Fabricate :individual }

            it 'returns the email' do
              expect(data['email']).to eq(account.email)
            end

            context 'with profiles' do
              let(:account) { Fabricate :individual_with_profiles }

              it 'returns the profiles' do
                expect(data['profiles']).to be_an(Array)
                expect(data['profiles'].count).to eq(account.profiles.count)
              end
            end
          end
        end
      end

      # TODO: implement access controls for models informed by (Pundit + Rolify) policies
      context 'accessing an unauthorized account' do
        let(:account) { Fabricate :account }

        context 'with the default format' do
          pending 'redirects to the sign in page'
        end

        context 'with format = json' do
          pending 'returns a 401 status code'
        end
      end
    end

    context 'without a signed in user' do
      context 'accessing an account' do
        let(:account) { Fabricate :account }

        context 'with the default format' do
          pending 'redirects to the sign in page'
        end

        context 'with format = json' do
          before { get account_url(account, format: :json) }

          it 'returns a 401 status code' do
            get account_url(account, format: :json)
            expect(response).to have_http_status(:unauthorized)
          end

          it 'returns an error message' do
            get account_url(account, format: :json)
            expect(response.body).to include('You need to sign in or sign up before continuing.')
          end
        end
      end
    end
  end

  describe 'GET /new' do
    let(:user) { Fabricate :user }

    before do
      sign_in user
    end

    it 'renders a successful response' do
      get new_account_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      account = Account.create! valid_attributes
      get edit_account_url(account)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with an authorized user' do
      # TODO: Implement access controls for models informed by (Pundit + Rolify) policies
      let(:user) { Fabricate :user }

      before do
        sign_in user
      end

      context 'and valid business account parameters' do
        let(:valid_attributes) do
          {
            display_name: Faker::Company.name,
            type: 'Business',
            tax_id: Faker::Company.ein,
            email: Faker::Internet.email,
            slug: Faker::Internet.slug,
            # IMPORTANT: Update frontend input component(s) to use formatting libraries
            #   that ensure fully formatted numbers are returned to the service
            phone: [
              Faker::PhoneNumber.cell_phone_with_country_code,
              Faker::PhoneNumber.phone_number_with_country_code
            ].sample,
            status: 'active'
          }
        end

        subject { Account.find_by_slug valid_attributes[:slug] }

        it 'creates a new Account' do
          expect do
            post accounts_url, params: { account: valid_attributes }
          end.to change(Account, :count).by(1)
        end

        xit 'sets all the attributes' do
          post accounts_url, params: { account: valid_attributes }
          valid_attributes.each do |key, value|
            expect(subject[key]).to eq(value)
          end
        end

        it 'redirects to the created account' do
          post accounts_url, params: { account: valid_attributes }
          expect(response).to redirect_to(account_url(subject))
        end

        context 'attributes' do
          before { post accounts_url, params: { account: valid_attributes } }

          context '#email' do
            it { expect(subject.email).to eq(valid_attributes[:email]) }
          end

          context '#phone' do
            let(:account) { Account.find_by_slug valid_attributes[:slug] }
            let(:parsed_number) { Phonelib.parse(valid_attributes[:phone]) }

            subject { account.profile.phone&.full_e164 }

            it { expect(subject).to eq(parsed_number.full_e164) }
          end

          context '#status' do
            it { expect(subject.status).to eq(valid_attributes[:status]) }
          end

          context '#tax_id' do
            it { expect(subject.tax_id).to eq(valid_attributes[:tax_id]) }
          end

          context '#type' do
            it { expect(subject.type).to eq(valid_attributes[:type]) }
          end

          context '#slug' do
            it { expect(subject.slug).to eq(valid_attributes[:slug]) }
          end

          context '#display_name' do
            it { expect(subject.display_name).to eq(valid_attributes[:display_name]) }
          end
        end
      end
    end

    context 'with valid parameters' do
      it 'creates a new Account' do
        expect do
          post accounts_url, params: { account: valid_attributes }
        end.to change(Account, :count).by(1)
      end

      it 'redirects to the created account' do
        post accounts_url, params: { account: valid_attributes }
        expect(response).to redirect_to(account_url(Account.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Account' do
        expect do
          post accounts_url, params: { account: invalid_attributes }
        end.to change(Account, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post accounts_url, params: { account: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested account' do
        account = Account.create! valid_attributes
        patch account_url(account), params: { account: new_attributes }
        account.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the account' do
        account = Account.create! valid_attributes
        patch account_url(account), params: { account: new_attributes }
        account.reload
        expect(response).to redirect_to(account_url(account))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        account = Account.create! valid_attributes
        patch account_url(account), params: { account: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested account' do
      account = Account.create! valid_attributes
      expect do
        delete account_url(account)
      end.to change(Account, :count).by(-1)
    end

    it 'redirects to the accounts list' do
      account = Account.create! valid_attributes
      delete account_url(account)
      expect(response).to redirect_to(accounts_url)
    end
  end
end
