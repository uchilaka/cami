# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/invoices', type: :request do
  include ActiveSupport::Testing::TimeHelpers
  # This should return the minimal set of attributes required to create a valid
  # Invoice. As you add validations to Invoice, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Invoice.create! valid_attributes
      get invoices_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    context 'with a signed in user' do
      let(:user) { Fabricate :user }

      before { sign_in user }

      context 'accessing an authorized invoice' do
        let(:invoice) { Fabricate :invoice }

        around do |example|
          travel_to(Time.new(2024, 10, 2, 11, 45)) { example.run }
        end

        context 'with the default format' do
          it 'renders a successful response' do
            get invoice_url(invoice)
            expect(response).to be_successful
          end
        end

        context 'with format = json' do
          let(:data) { JSON.parse(response.body) }

          before { get invoice_url(invoice), as: :json }

          it 'renders a successful response' do
            expect(response).to be_successful
          end

          it 'returns the invoice number' do
            expect(data['number']).to eq(invoice.invoice_number)
          end

          it 'returns the invoiced at' do
            expect(data['invoicedAt']).to eq(invoice.invoiced_at.change(usec: 0).iso8601)
          end

          it 'returns the due at' do
            expect(data['dueAt']).to eq(invoice.due_at.change(usec: 0).iso8601)
          end

          it 'returns the amount' do
            expect(data['amount']).to eq({ 'currency_code' => 'USD', 'value' => 0.0 })
          end
        end
      end
    end

    context 'without a signed in user' do
      let(:invoice) { Fabricate :invoice }

      context 'with the default format' do
        it 'redirects to the sign in page' do
          get invoice_url(invoice)
          expect(response).to redirect_to(new_user_session_url)
        end
      end

      context 'with format = json' do
        it 'returns a 401 status code' do
          get invoice_url(invoice), as: :json
          expect(response).to have_http_status(:unauthorized)
        end
      end
    end
  end

  describe 'GET /new' do
    # TODO: /invoices/new seems to be failing in CI, but not when running the application locally. Investigate further.
    it 'renders a successful response' do
      skip <<~TODO
        /invoices/new seems to be failing in CI, but not when running the application locally. Investigate further.
      TODO
      get new_invoice_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      invoice = Invoice.create! valid_attributes
      get edit_invoice_url(invoice)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Invoice' do
        expect do
          post invoices_url, params: { invoice: valid_attributes }
        end.to change(Invoice, :count).by(1)
      end

      it 'redirects to the created invoice' do
        post invoices_url, params: { invoice: valid_attributes }
        expect(response).to redirect_to(invoice_url(Invoice.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Invoice' do
        expect do
          post invoices_url, params: { invoice: invalid_attributes }
        end.to change(Invoice, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post invoices_url, params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        expect(response).to redirect_to(invoice_url(invoice))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested invoice' do
      invoice = Invoice.create! valid_attributes
      expect do
        delete invoice_url(invoice)
      end.to change(Invoice, :count).by(-1)
    end

    it 'redirects to the invoices list' do
      invoice = Invoice.create! valid_attributes
      delete invoice_url(invoice)
      expect(response).to redirect_to(invoices_url)
    end
  end
end
