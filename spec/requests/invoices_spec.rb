# frozen_string_literal: true

require 'swagger_helper'

load_lib_script 'tasks/fixtures/invoices', ext: 'thor'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'Invoices API', type: :request, invoice_data: true do
  # This should return the minimal set of attributes required to create a valid
  # Invoice. As you add validations to Invoice, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'POST /invoices/search' do
    let!(:user) { Fabricate :user }

    let(:paid_account) { Account.find_by_email('logistics@indigo.test') }

    before do
      # Associate the user to a paid account
      paid_account.users << user
      # Sign in as the first user in the paid account
      sign_in user
    end

    path '/invoices/search.json' do
      post 'Retrieves all invoices' do
        tags 'Invoices'
        consumes 'application/json'
        produces 'application/json'

        parameter name: :search_params, in: :body, schema: {
          type: :object,
          properties: {
            q: { type: :string, nullable: true },
            f: {
              type: :array,
              nullable: true,
              items: {
                type: :object,
                properties: {
                  field: { type: :string },
                  value: { type: :string }
                }
              }
            },
            s: {
              type: :array,
              nullable: true,
              items: {
                type: :object,
                properties: {
                  field: { type: :string },
                  direction: { type: :string }
                }
              }
            }
          }
        }

        response '200', 'invoices found' do
          schema type: :array,
                 items: { '$ref' => '#/components/schemas/invoice' }

          context 'where status is PAID' do
            let(:f) do
              [{ 'field' => 'status', 'value' => 'PAID' }]
            end
            let(:s) do
              [
                { 'field' => 'dueAt', 'direction' => 'desc' },
                { 'field' => 'account', 'direction' => 'desc' },
              ]
            end
            let(:search_params) { { q: 'AEL', s:, f: } }

            run_test!
          end
        end
      end
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      invoice = Invoice.create! valid_attributes
      get invoice_url(invoice)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    let(:user) { Fabricate :user }

    context 'when signed in' do
      before { sign_in user }

      it 'renders a successful response' do
        get new_invoice_url
        expect(response).to be_successful
      end
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      invoice = Invoice.create! valid_attributes
      get edit_invoice_url(invoice)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Invoice' do
        expect do
          post invoices_url, params: { invoice: valid_attributes }
        end.to change(Invoice, :count).by(1)
      end

      it 'redirects to the created invoice' do
        post invoices_url, params: { invoice: valid_attributes }
        expect(response).to redirect_to(invoice_url(Invoice.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Invoice' do
        expect do
          post invoices_url, params: { invoice: invalid_attributes }
        end.to change(Invoice, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post invoices_url, params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        expect(response).to redirect_to(invoice_url(invoice))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested invoice' do
      invoice = Invoice.create! valid_attributes
      expect do
        delete invoice_url(invoice)
      end.to change(Invoice, :count).by(-1)
    end

    it 'redirects to the invoices list' do
      invoice = Invoice.create! valid_attributes
      delete invoice_url(invoice)
      expect(response).to redirect_to(invoices_url)
    end
  end
end
